#!/bin/sh

# komputer maschine gets your macOS machine up and running quickly.
# No more second guessing if you've installed the tools you need.

komputer_echo() {
  local fmt="$1"; shift

  printf "\n$fmt\n" "$@"
}

append_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="${2:-0}"

  zshrc="$HOME/.zshrc"

  if ! grep -Fqs "$text" "$zshrc"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\n" "$text" >> "$zshrc"
    else
      printf "\n%s\n" "$text" >> "$zshrc"
    fi
  fi
}

# Let the user know if the script fails
trap 'ret=$?; test $ret -ne 0 && printf "\nkomputer maschine failed. :(\n\n" >&2; exit $ret' EXIT

set -e

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

append_to_zshrc 'export PATH="$HOME/.bin:$PATH"'

if [ ! -d "/usr/local/include" ]; then
  sudo mkdir /usr/local/include
fi

sudo chown -R $(whoami) /usr/local/include
sudo chown -R $(whoami) /etc/shells


HOMEBREW_PREFIX="/usr/local/include"

if [ -d "$HOMEBREW_PREFIX" ]; then
  if ! [ -r "$HOMEBREW_PREFIX" ]; then
    sudo chown -R "$LOGNAME:admin" /usr/local
  fi
else
  sudo mkdir "$HOMEBREW_PREFIX"
  sudo chflags norestricted "$HOMEBREW_PREFIX"
  sudo chown -R "$LOGNAME:admin" "$HOMEBREW_PREFIX"
fi

brew install zsh

case "$SHELL" in
  */zsh) : ;;
  *)
    komputer_echo "Changing your shell to zsh..."
    echo -e "/usr/local/bin/zsh\n$(cat /etc/shells)" > /etc/shells
      sudo chsh -s "$(which zsh)"
    ;;
esac

gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    gem update "$@"
  else
    gem install "$@"
    rbenv rehash
  fi
}

# Install XCode
if type xcode-select >&- && xpath=$( xcode-select --print-path ) &&
  test -d "${xpath}" && test -x "${xpath}" ; then
  komputer_echo "XCode already installed. Skipping..."
else
  komputer_echo "Installing XCode..."
  xcode-select --install
fi

if ! command -v brew >/dev/null; then
  komputer_echo "Installing Homebrew..."
    curl -fsS \
      'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby

    # shellcheck disable=SC2016
    append_to_zshrc 'export PATH="/usr/local/bin:$PATH"' 1

    export PATH="/usr/local/bin:$PATH"
  else
  komputer_echo "Updating Homebrew..."
  brew update
fi

komputer_echo "Installing services..."
brew bundle --file=- <<EOF
tap "homebrew/services"
tap "caskroom/cask"
tap "caskroom/fonts"

# Unix
brew "git"
brew "reattach-to-user-namespace"
brew "tmux"
brew "zsh-completions"
brew "vim"
brew "readline"
brew "xz"
brew "fzf"
brew "ack"
brew "tree"

# Image manipulation
brew "imagemagick"

# Programming languages
brew "rbenv"
brew "ruby-build"
brew "python"
brew "pyenv"
brew "golang"
brew "heroku-toolbelt"
brew "mas"

# Tools
brew "postgresql"
brew "redis"
brew "erlang"
brew "elixir"
brew "yarn"
brew "watchman"
brew "chromedriver"
EOF

# Check for Node
if test ! $(brew list | grep node); then
  komputer_echo 'Installing Node...'
  brew install node
else
  komputer_echo 'Node already installed. Skipping...'
fi

npm install ember-cli -g
npm install -g jshint
npm install -g eslint

applications=(
  google-chrome
  iterm2
  atom
  virtualbox
  vagrant
  sketch
  docker
  spotify
  java
  postman
  google-cloud-sdk
  google-drive
  font-source-code-pro
  font-inconsolata-dz-for-powerline
  imageoptim
  recordit
  macvim
  pycharm
  firefox
  microsoft-office
  dash
)

komputer_echo "Installing applications..."

install_application() {
  if test ! $(brew cask list | grep $application); then
    komputer_echo "Installing $application..."
    brew cask install --appdir="/Applications" $application
  else
    komputer_echo "$application already installed. Skipping..."
  fi
}

for application in "${applications[@]}"
  do install_application $application
done
# Clean up Homebrew files
komputer_echo "Cleaning up files..."
brew cleanup
brew cask cleanup

komputer_echo "Configuring Ruby..."

find_latest_ruby() {
  rbenv install -l | grep -v - | tail -1 | sed -e 's/^ *//'
}

ruby_version="$(find_latest_ruby)"

append_to_zshrc 'eval "$(rbenv init - --no-rehash)"' 1
eval "$(rbenv init -)"

if ! rbenv versions | grep -Fq "$ruby_version"; then
  RUBY_CONFIGURE_OPTS=--with-openssl-dir=/usr/local/opt/openssl rbenv install -s "$ruby_version"
fi

rbenv global "$ruby_version"
rbenv shell "$ruby_version"
sudo gem update --system
sudo gem install bundler
number_of_cores=$(sysctl -n hw.ncpu)
bundle config --global jobs $((number_of_cores - 1))
sudo gem install rails
sudo gem install foreman


# Setup Python
komputer_echo "Configuring Python"
append_to_zshrc 'eval "$(pyenv init - --no-rehash)"' 1
eval "$(pyenv init -)"
CFLAGS="-I$(brew --prefix openssl)/include" \
LDFLAGS="-L$(brew --prefix openssl)/lib" \
pyenv install -v 2.7.14

CFLAGS="-I$(brew --prefix openssl)/include" \
LDFLAGS="-L$(brew --prefix openssl)/lib" \
pyenv install -v 3.6.3

pyenv global 3.6.3 2.7.14
pyenv rehash

curl https://bootstrap.pypa.io/get-pip.py > get-pip.py
sudo python get-pip.py
pip install --upgrade pip
pip install virtualenv
pip install virtualenvwrapper
brew install gcc
pip install nose pyparsing python-dateutil pep8

brew tap samueljohn/python
brew tap homebrew/science
brew install numpy
brew install scipy
brew install zeromq
brew install pyqt
pip install 'ipython[zmq,qtconsole,notebook,test]'

# Setup powerline fonts
rm -rf ~/fonts
git clone https://github.com/powerline/fonts.git --depth=1
cd ~/fonts
./install.sh

# Tweetbot
mas install 557168941
# Color picker
mas install 641027709
# 1 password
mas install 443987910
# BetterSnapTool
mas install 417375580
# Pages
mas install 409201541
# HP Easy Scan
mas install 967004861
# Keynote
mas install 409183694
# Live Reload
mas install 482898991
# Skitch
mas install 425955336
# Numbers
mas install 409203825
# XCode
mas install 497799835
# Unarchiver
mas install 425424353
# Kindle
mas install 405399194
# Postico
mas install 1031280567


# Setup Git config
#! /usr/local/bin/zsh -
cd ~
curl -O https://raw.githubusercontent.com/nicolashery/mac-dev-setup/master/.gitconfig
curl https://raw.githubusercontent.com/github/gitignore/master/Global/macOS.gitignore -o ~/.gitignore
git config --global user.name "Joshua Rose"
git config --global user.email "joshuarose@outlook.com"
git config --global credential.helper osxkeychain

rm -rf ~/.zprezto
git clone --recursive https://github.com/sorin-ionescu/prezto.git "${ZDOTDIR:-$HOME}/.zprezto"
setopt EXTENDED_GLOB
for rcfile in "${ZDOTDIR:-$HOME}"/.zprezto/runcoms/^README.md(.N); do
  ln -s "$rcfile" "${ZDOTDIR:-$HOME}/.${rcfile:t}"
done

echo "if [[ -s \"${ZDOTDIR:-$HOME}/.zprezto/init.zsh\" ]]; then\n\tsource \"${ZDOTDIR:-$HOME}/.zprezto/init.zsh\"\nfi" >> ~/.zshrc
echo "zstyle ':prezto:load' pmodule \\" >> ~/.zpreztorc
echo "\t'environment' \\" >> ~/.zpreztorc
echo "\t'editor' \\" >> ~/.zpreztorc
echo "\t'history' \\" >> ~/.zpreztorc
echo "\t'directory' \\" >> ~/.zpreztorc
echo "\t'spectrum' \\" >> ~/.zpreztorc
echo "\t'utility' \\" >> ~/.zpreztorc
echo "\t'completion' \\" >> ~/.zpreztorc
echo "\t'git' \\" >> ~/.zpreztorc
echo "\t'syntax-highlighting' \\" >> ~/.zpreztorc
echo "\t'history-substring-search' \\" >> ~/.zpreztorc
echo "\t'prompt' \\" >> ~/.zpreztorc
echo "zstyle ':prezto:module:prompt' theme 'paradox'" >> ~/.zpreztorc
echo "source ~/env.sh" >> ~/.zshrc

git clone https://github.com/amix/vimrc.git ~/.vim_runtime
sh ~/.vim_runtime/install_awesome_vimrc.sh

# Remove default icons from Dock
defaults delete com.apple.dock persistent-apps
defaults delete com.apple.dock persistent-others
defaults write com.apple.dock pinning -string end
defaults write com.apple.Dock autohide-delay -float 0
defaults write com.apple.Dock autohide -bool TRUE
defaults write NSGlobalDomain KeyRepeat -int 0.02
defaults write NSGlobalDomain InitialKeyRepeat -int 12
defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad TrackpadCornerSecondaryClick -int 2
defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad TrackpadRightClick -bool true
defaults -currentHost write NSGlobalDomain com.apple.trackpad.trackpadCornerClickBehavior -int 1
defaults -currentHost write NSGlobalDomain com.apple.trackpad.enableSecondaryClick -bool true
defaults write com.apple.systemuiserver "NSStatusItem Visible com.apple.menuextra.volume" -int 0
killall Dock

komputer_echo "Congratulations! Your komputer maschine is ready to go."
